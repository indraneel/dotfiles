input = 5

lines 1-5
    declarations
lines 7-13
    -20 [ %edi = 5 ]
    -16 [ 1 ]
    -12 [ 0 ]
    -8  [ 0 ]

line 14
    $2 < 5
line 15
    jump because 5 > 2

L2
    -4 [ 2 ]
    jumps to L4?

L4
    %eax [ 2 ]
    if %eax <= -20(%rbp)
	2 <= 5
	it is!
	jump to L5

L5
    %eax [ -12(%rbp) = 0 ]
    %edx [ -16(%rbp) = 1 ]
    %eax [ %rdx+%rax = 1 ] //leal(%rdx,%rax), %eax => rdx + rax 
    -8  [ 1 ]
    %eax [ -16(%rbp) = 1 ]
    -12 [ 1 ]
    %eax [ -8(%rbp) = 1 ]
    -16 [ %eax = 1 ]
    -4 [ -4(%rbp) + 1 = 2 + 1 = 3 ]
    back to .L4!

L4
    %eax [ 3 ]
    if %eax <= -20(%rbp)
	3 <= 5
	it is!
	jump to L5
	(AND THIS HAPPENS FOR %EAX = 3, 4, AND 5)
L5 %eax = 3
    %eax [ -12(%rbp) = 1 ]
    %edx [ -16(%rbp) = 1 ]
    %eax [ %rdx+%rax = 2 ]
    -8 [ 2 ]
    %eax [ -16(%rbp) = 1 ]
    -12 [ 1 ]
    %eax [ -8(%rbp) = 2 ]
    -16 [ %eax = 2 ]
    -4 [ -4(%rbp) + 1 = 3 + 1 = 4 ]
    back to .L4!

L4
    %eax [ 4 ]
    if %eax <= -20(%rbp)
	4 <= 5
	it is!
	jump to L5

L5 %eax = 4
    %eax [ -12(%rbp) = 1 ]
    %edx [ -16(%rbp) = 2 ]
    %eax [ %rdx+%rax = 3 ]
    -8 [ 3 ]
    %eax [ -16(%rbp) = 2 ]
    -12 [ 1 ]
    %eax [ -8(%rbp) = 3 ]
    -16 [ %eax = 3 ]
    -4 [ -4(%rbp) + 1 = 4 + 1 = 5 ]
    back to .L4!

L4
    %eax [ 5 ]
    if %eax <= -20(%rbp)
	5 <= 5
	it is!
	jump to L5

L5 %eax = 5
    %eax [ -12(%rbp) = 1 ]
    %edx [ -16(%rbp) = 3 ]
    %eax [ %rdx+%rax = 4 ]
    -8 [ 4 ]
    %eax [ -16(%rbp) = 3 ]
    -12 [ 1 ]
    %eax [ -8(%rbp) = 4 ]
    -16 [ %eax = 4 ]
    -4 [ -4(%rbp) + 1 = 5 + 1 = 6 ]
    back to L4

L4
    %eax [ 6 ]
    if %eax <= -20(%rbp)
	it is not!

    %eax [ 4 ]
    back up to L2

L2
    which ends and goes up to 'mystery'

mystery
    %eax [ 1 ]
    jumps to L3

L3
   leave
   return;




    
