package cs213.photoalbum.control;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import cs213.photoalbum.model.Album;
import cs213.photoalbum.model.Photo;
import cs213.photoalbum.model.User;

/**
 * Represents an interface that can pull requests from the model end of the
 * project. Each control knows about one user; running methods on the control
 * will change which user it applies to.
 * @author Kyle
 */
public interface Control {
	/**
	 * Adds a new user to the existing list.
	 * @param userID The unique ID for this user.
	 * @param username The display name for the user.
	 * @return True if the user was added successfully; false otherwise.
	 */
	public boolean addUser(String userID, String username);
	
	/**
	 * Removes the user with the given identification. 
	 * @param userID The ID of the user.
	 * @return True if the removal was successful; false otherwise.
	 */
	public boolean removeUser(String userID);
	
	/**
	 * Loads the user's data, so that all picture-related methods will act on
	 * that particular user. Use this method to "log in" the user.
	 * @param userID The ID of the user.
	 * @return True if the user was loaded successfully; false otherwise.
	 */
	public boolean loadUser(String userID);
	
	/**
	 * Unloads the current user. Calling any of the photo or album methods
	 * without reloading the user will result in an exception.
	 */
	public void unload();
	
	/**
	 * @return The current user logged in, or <code>null</code> if no one is
	 * logged into the system.
	 */
	public User getCurrentUser();
	
	/**
	 * Adds the given album to the user's library.
	 * @param albumname The name of the new album.
	 * @param photos The photos to add to the album.
	 * @return True if the album was created successfully; false if there
	 * already exists an album with that name.
	 */
	public boolean addAlbum(String albumname, ArrayList<Photo> photos);
	
	/**
	 * @param name The name of the album.
	 * @return The user's album with the specified name, or <code>null</code>
	 * if it does not exist.
	 */
	public Album getAlbum(String name);
	
	/**
	 * Deletes the given album.
	 * @param albumname The name of the album to delete.
	 * @return True if the album was deleted successfully; false if there does
	 * not exist an album with that name.
	 */
	public boolean deleteAlbum(String albumname);
	
	/**
	 * Renames an album with a new name.
	 * @param oldname The name of the old album.
	 * @param newname The new name of the album.
	 * @return True if the album was successfully renamed; false if there does
	 * not exist an album called <code>oldname</code> or if an album with name
	 * <code>newname</code> already exists.
	 */
	public boolean renameAlbum(String oldname, String newname);
	
	/**
	 * Adds a photograph to an album.
	 * @param photo The photo to add.
	 * @param album The album to add the photo to.
	 * @throws IllegalArgumentException if the album specified does not exist
	 * or if the photo is already in the album.
	 */
	public void addPhoto(String album, String photo) throws IllegalArgumentException, FileNotFoundException;
	
	/**
	 * Moves a photo from one album to another.
	 * @param filename The name of the photo to move.
	 * @param oldalbum The name of the photo's old album.
	 * @param newalbum The name of the new album.
	 * @return True if the move was successful; false if the albums do not
	 * exist or the photo cannot be found. 
	 */
	public boolean movePhoto(String filename, String oldalbum, String newalbum);
	
	/**
	 * Removes a photo from an album.
	 * @param filename The name of the photo to remove.
	 * @param album The album that the photo belongs to.
	 * @return True if the remove was successful; false if either the photo or
	 * the album does not exist.
	 */
	public boolean removePhoto(String filename, String album);
	
	/**
	 * Adds a tag to a photo.
	 * @param filename The name of the photo file.
	 * @param tagtype The type of tag.
	 * @param tag The value of the photo tag.
	 * @return True if the tag was added successfully; false if the photo does
	 * not exist.
	 */
	public boolean addTag(String filename, String tagtype, String tag);
	
	/**
	 * Deletes a tag from a photo.
	 * @param filename The name of the photo.
	 * @param tagtype The type of tag.
	 * @param tag The value of the tag.
	 * @return True if the tag was removed successfully; false otherwise.
	 */
	public boolean deleteTag(String filename, String tagtype, String tag);
	
	/**
	 * @param filename The name of the photo
	 * @return The photo with the given name.
	 */
	public Photo getPhoto(String filename);
	
	/**
	 * @param startDate A start date.
	 * @param endDate An end date, after the start date.
	 * @return All photos taken between the two dates (inclusive), in
	 * chronological order.
	 */
	public ArrayList<Photo> getPhotos(Calendar startDate, Calendar endDate);
	
	/**
	 * @param kwargs A hash map containing tag type and tag value pairs.
	 * @return All photos that have all of the given tags, in chronological
	 * order.
	 */
	public ArrayList<Photo> getPhotos(HashMap<String, String> kwargs);
}