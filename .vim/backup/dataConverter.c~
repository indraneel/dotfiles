#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "dataConverter.h"


int* convertToBase(double number_to_convert, int base, int* psize){
 
  /*  printf("Converting %f to base %d\n", number_to_convert, base);*/
 
	int size = log10(number_to_convert)/(log10(base)+1);
		size = 32;
	*psize = size;
	int *number = (int*) malloc(sizeof(int) * size);
	int i = 0;
	int limit = (base == 16) ? 4 : 8;

	double multiplicand = fmod(number_to_convert, 1);
	/* printf("multiplicand at start = %f\n", multiplicand);*/
	while (multiplicand > 0 && i < limit) {
	    /*  printf("i value = %d", i);*/
	    /* number[i] = (multiplicand*base)-fmod(multiplicand*base,1)  */
	    multiplicand *= base;
	    /*  printf("multiplicand after first jawntiplication = %f\n", multiplicand);*/

	    number[i] = (int)((multiplicand)-fmod(multiplicand,1));
	    /*  printf("multiplicand stored = %d\n", number[i]);*/

	    multiplicand = fmod(multiplicand, 1);
	    /*  printf("mult at end of while loop = %f\n", multiplicand);*/

	    i+=1;
	}

	
	number[i] = 46;
	i++;
   
	limit = (base == 16) ? 4 : 8;

	int dividend = number_to_convert;
	while(dividend > 0 && i < size-limit) {
		if (base == 16){
		switch (dividend % base){
		case 10:
			number[i] = ((dividend % base) + 55);
			/*printf("curr char = %d\n", number[i]);*/
			break;

		case 11:
			number[i] = ((dividend % base) + 55);
			break;

		case 12:
			number[i] = ((dividend % base) + 55);
			break;

		case 13:
			number[i] = ((dividend % base) + 55);
			break;
			
		case 14:
			number[i] = ((dividend % base) + 55);
			break;

		case 15:
			number[i] = ((dividend % base) + 55);
			break;

		default:
			number[i] = dividend % base;
		}
	}
	else {
		number[i] = dividend % base;
	}
		dividend /= base;
		/*  printf("number stored = %d\n", number[i]);*/
		i+=1;
		/*  printf("ival bottom loop one = %d\n", i);*/
	}

	return number;
}


double myatoi( const char *c, int* decLoc, int base){
	double result = 0, factor = 1;
	int currLoc = 0;
	bool found_decimal;
	for (found_decimal = false; *c; c++){
	    currLoc++;
	    if (*c == '.'){
		    *decLoc = currLoc;
		    found_decimal = true;
		    continue;
	    }

	    int digit = *c - '0';
	    if (digit >= 0 && digit <= 9){
		    if (found_decimal){
			factor /= (base*1.0f);
		    }
		    result = result * (base*1.0f) + (double)digit;
	    /*      printf("result = %f\n", result);*/
	    }
	}
	return result * factor;
}

void printHelp(void){
	fprintf(stderr, "%s\n", "Cool your jets, captain!\nYou should use this program in the following way: dataConverter -<b|d|h|o> <input data> -<b|d|h|o>\n");
	return;
}

int main(int argc, char **argv){
	int counter = 0, decLoc = 0;
	double input;
	int outputSize;
	int *converted = 0;
	bool fractionPrint = false;
	if (argc < 4 || argc > 4){
		printHelp();
		return 1;
	}
	
	if (argv[1][0] != '-' || argv[3][0] != '-'){
		printHelp();
		return 1;
	}

	char *curr = argv[2];
	char f1 = argv[1][1];
	char f2 = argv[3][1];


	/* input is in binary  */
	if (f1 == 'b' && argv[1][0] == '-' && !argv[1][2]){
	input = myatoi(curr, &decLoc, 2);
	/*printf("input = %f\n", input);*/

	/* out put is in binary */
	if (f2== 'b' && argv[3][0] == '-' && !argv[3][2]){
		while (*curr != '\0'){
		printf("%c", *curr);
		curr++;
		}
		printf("\n");
		return 0;
	}
	/* output is in decimal */
	if (f2=='d' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		    printf("%d",0);
		}
		else {
			converted = convertToBase(input, 10, &outputSize);
			for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
				if (converted[counter] == 46){
					printf("%c", converted[counter]);
					fractionPrint = true;
					decLoc = counter;
					break;
				}
				else {
					printf("%d", converted[counter]);
				}
			}
			if (fractionPrint){
				for (counter = 0; counter < decLoc; counter++){
					printf("%d", converted[counter]);
				}
			}
			printf("\n");
		}
		return 0;
	}


	/* output is in hex */
	if (f2 == 'h' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
			printf("%d",0);
		}
		else {
			converted = convertToBase(input, 16, &outputSize);
			for (counter = outputSize-1-(3*8-1); counter > -1; counter--){
					if (converted[counter] == 46){
					printf("%c", converted[counter]);
					fractionPrint = true;
					decLoc = counter;
					break;
			}

			if ((converted[counter] > 64 && converted[counter] < 71)){
				printf("%c", converted[counter]);
			}
			else {
				printf("%d", converted[counter]);
			}
		}
			if (fractionPrint){
				for (counter = 0; counter < decLoc; counter++){
					if ((converted[counter] > 9 && converted[counter] < 16)){
					   printf("%c", converted[counter]+'57');
					}
					else {
					   printf("%d", converted[counter]);
					}
				} 
			}
			printf("\n");
		}
		return 0;
	}
	if (f2 == 'o' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 8, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if(converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	printHelp();
	return 1;
	}


	/* input is a decimal */
	if (f1 == 'd' && argv[1][0] == '-' && !argv[1][2]){
	input = myatoi(curr, &decLoc, 10);
	/*printf("input = %f\n", input);*/
	/*printf("decimal location = %d\n", decLoc);*/

	/* output is in decimal */
	if (f2== 'd' && argv[3][0] == '-' && !argv[3][2]){
		while (*curr != '\0'){
		printf("%c", *curr);
		curr++;
		}
		printf("\n");
		return 0;
	}
	
	/* output is in binary */
	if (f2=='b' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 2, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'h' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 16, &outputSize);
		for (counter = outputSize-1-(3*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}

			if ((converted[counter] > 64 && converted[counter] < 71)){
			printf("%c", converted[counter]);
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			if ((converted[counter] > 9 && converted[counter] < 16)){
			   printf("%c", converted[counter]+'57');
			}
			else {
			   printf("%d", converted[counter]);
			}
			} 
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'o' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 8, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if(converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	printHelp();
	return 1;
	}

	if (f1 == 'h' && argv[1][0] == '-' && !argv[1][2]){
	input = myatoi(curr, &decLoc, 16);
	if (f2== 'h' && argv[3][0] == '-' && !argv[3][2]){
		while (*curr != '\0'){
		printf("%c", *curr);
		curr++;
		}
		printf("\n");
		return 0;
	}
	if (f2=='d' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 10, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'b' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 2, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'o' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 8, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if(converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	printHelp();
	return 1;
	}

	if (f1 == 'o' && argv[1][0] == '-' && !argv[1][2]){
	input = myatoi(curr, &decLoc, 8);
	if (f2== 'o' && argv[3][0] == '-' && !argv[3][2]){
		while (*curr != '\0'){
		printf("%c", *curr);
		curr++;
		}
		printf("\n"); 
		return 0;
	}
	if (f2=='d' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 10, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'h' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 16, &outputSize);
		for (counter = outputSize-1-(3*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}

			if ((converted[counter] > 64 && converted[counter] < 71)){
			printf("%c", converted[counter]);
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			if ((converted[counter] > 9 && converted[counter] < 16)){
			   printf("%c", converted[counter]+'57');
			}
			else {
			   printf("%d", converted[counter]);
			}
			} 
		}
		printf("\n");
		}
		return 0;
	}
	if (f2 == 'b' && argv[3][0] == '-' && !argv[3][2]){
		if (input == 0){
		printf("%d",0);
		}
		else {
		converted = convertToBase(input, 2, &outputSize);
		for (counter = outputSize-1-(2*8-1); counter > -1; counter--){
			if (converted[counter] == 46){
			printf("%c", converted[counter]);
			fractionPrint = true;
			decLoc = counter;
			break;
			}
			else {
			printf("%d", converted[counter]);
			}
		}
		if (fractionPrint){
			for (counter = 0; counter < decLoc; counter++){
			printf("%d", converted[counter]);
			}
		}
		printf("\n");
		}
		return 0;
	}
	printHelp();
	return 1;
	}

	printHelp();
	return 1;
}
